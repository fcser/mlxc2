<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jxxy.mlxc.news.mapper.CommentDAO">
    <resultMap id="commentDependencyMap" type="com.jxxy.mlxc.news.api.dto.CommentDependencyDto">
        <result property="id" jdbcType="INTEGER" column="id"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result property="goodNum" jdbcType="INTEGER" column="good_num"/>
        <result property="createTime" jdbcType="TIMESTAMP" column="create_time"/>
        <collection column="id" property="childComments" select="showChildComments"/>
    </resultMap>
    <resultMap id="commentMap" type="com.jxxy.mlxc.news.api.dto.MyCommentsDto">
        <result property="createTime" jdbcType="TIMESTAMP" column="create_time"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result property="newsId" jdbcType="INTEGER" column="news_id"/>
        <result property="newsTitle" jdbcType="VARCHAR" column="new_title"/>
        <result property="id" jdbcType="INTEGER" column="id"/>
        <result property="fatherContent" jdbcType="VARCHAR" column="father_content"/>
    </resultMap>
    <insert id="insert" parameterType="commentDO" useGeneratedKeys="true" keyProperty="id">
        insert into comment(news_id,content,comment_user_id) values (#{newsId},#{content},#{commentUserId})
    </insert>
    <insert id="insertDependency" parameterType="commentDependDO">
        insert into comment_depend(comment_id,father_comment_id) values (#{commentId},#{fatherCommentId})
    </insert>
    <insert id="insetGood">
        insert into comment_good(comment_id,user_id) values (#{commentId},#{userId})
    </insert>
    <select id="getMyLike" resultType="java.lang.Integer">
        select count(t.id) from comment_good t where t.comment_id=#{commentId} and t.user_id=#{userId}
    </select>
    <update id="updateGoods">
        update comment
        set good_num=good_num+1
        where id=#{id}
    </update>
    <update id="notReply" parameterType="Long">
        update comment
        set should_reply=1
        where id=#{id}
    </update>
    <select id="countComments" resultType="java.lang.Integer" parameterType="Long">
        select count(t.id)
        from comment t
        left join comment_depend c on c.comment_id=t.id
        where t.news_id=#{newsId}
        and c.father_comment_id is null
    </select>
    <!--一级留言-->
    <select id="getComments" resultMap="commentDependencyMap" parameterType="Long">
        select t.id,t.content,u.user_name,t.good_num,t.create_time
        from comment t
        left join users u on u.id=t.comment_user_id
        left join comment_depend c on c.comment_id=t.id
        where c.father_comment_id is null
        and t.news_id=#{newsId}
        order by t.good_num desc
    </select>
    <select id="showChildComments" resultMap="commentDependencyMap" parameterType="Long">
        select t.id,t.content,u.user_name,t.good_num,t.create_time
        from comment t
        left join users u on u.id=t.comment_user_id
        left join comment_depend c on c.comment_id=t.id
        where c.father_comment_id=#{id}
        order by t.good_num desc
        LIMIT 0,100
    </select>
    <!--获取我的未回复的评论,评论数最深两级-->
    <select id="getMyComments" resultMap="commentMap" parameterType="com.jxxy.mlxc.news.api.query.CommentQuery">
        select distinct t.news_id,n.title as new_title,t.id,t.content,t.create_time,u.user_name,null as father_content
        from comment t
        left join users u on u.id=t.comment_user_id
        left join news n on n.id=t.news_id
        left join comment_depend c on c.father_comment_id=t.id
        where n.create_user_id=#{createUserId} and u.id!=#{createUserId} and c.comment_id is null and t.should_reply=0
        <if test="newsId!=null">
            and t.news_id=#{newsId}
        </if>
        <!--查询出作者给我回复的留言，父子留言join在一起，-->
        union (select t.news_id,n.title as new_title,t.id,t.content,t.create_time,u.user_name,t2.content as father_content
        <!--父留言-->
        from comment t2
        left join comment_depend c on c.father_comment_id=t2.id
        <!--子留言，若父留言不为空，子留言的子留言为空，则说明这是条未回复的留言-->
        left join comment t on t.id=c.comment_id
        left join users u on u.id=t.comment_user_id
        left join news n on n.id=t.news_id
        left join comment_depend c2 on c2.father_comment_id=t.id
        where c.comment_id is not null and t2.comment_user_id=#{createUserId} and c2.comment_id is null and t.should_reply=0
        <if test="newsId!=null">
            and t.news_id=#{newsId}
        </if>
        order by t.create_time desc
        )
    </select>
    <!--计算我未回复评论数量-->
    <select id="countMyComment" resultType="java.lang.Integer">
        SELECT SUM(cns) as num FROM(
        select distinct count(t.id) as cns
        from comment t
        left join users u on u.id=t.comment_user_id
        left join news n on n.id=t.news_id
        left join comment_depend c on c.father_comment_id=t.id
        where n.create_user_id=#{userId} and u.id!=#{userId} and c.comment_id is null and t.should_reply=0
        <!--查询出作者给我回复的留言，父子留言join在一起，-->
        union all
        select count(t2.id) as cns
        <!--父留言-->
        from comment t2
        left join comment_depend c on c.father_comment_id=t2.id
        <!--子留言，若父留言不为空，子留言的子留言为空，则说明这是条未回复的留言-->
        left join comment t on t.id=c.comment_id
        left join users u on u.id=t.comment_user_id
        left join news n on n.id=t.news_id
        left join comment_depend c2 on c2.father_comment_id=t.id
        where c.comment_id is not null and t2.comment_user_id=#{userId} and c2.comment_id is null and t.should_reply=0)
        AS countdata
    </select>
</mapper>